# Aliases and functions to help with git, github (and RVM) operations
# unless commented out, this file will affect the PS1 shell prompt

#
# Build a better shell prompt
#

# Git and RVM prompting
function git-current-branch {
  git branch 2> /dev/null | grep \* | cut -d ' ' -f 2-
}

#export PS1="[\$(~/.rvm/bin/rvm-prompt v p g)] \$(git-current-branch)$PS1"
orig_prompt="[\u@\h \W]\\$ "
bold_prompt="\[$(tput bold)\][\u@\h \W]\\$ "
bold="\[$(tput bold)\]"
regular="\[$(tput sgr0)\]"
shorten="14" # set to '' for no shortening, otherwise number of chars to display for long inputs

# shorten a string passed as $1 to the length given as $2
function shorten {
  str="$1"
  len=$2
  #if $str -eq "metasploit-framework"; then
  #  echo "msf"
  #else
  echo $str | cut -c 1-$len
  #fi
}

# check if the shorten variable has a value, if so, send $1 to be shortened
function check_shorten {
  if [ -n "$shorten"  ]; then # this will explode if shorten is 0, but I don't care
    echo "$(shorten $1 $shorten)"
  else
    echo $1
  fi
}

# add git branch info, shortened, to the shell prompt
function prompt_git {
  local ps=$bold
  ps="${ps}(\$(check_shorten \$(git-current-branch)))"
  ps="${ps}${regular}$orig_prompt"
  export PS1="$ps"
}

# add ruby ver info, shortened, to the shell prompt
function prompt_ruby {
  local ps=$bold
  ps="${ps}(\$(check_shorten \$(~/.rvm/bin/rvm-prompt v p g)))"
  ps="${ps}${regular}$orig_prompt"
  export PS1="$ps"
}

# add both git branch and ruby ver info, shortened, to the shell prompt
function prompt_git_ruby {
  local ps=$bold
  ps="${ps}(\$(check_shorten \$(~/.rvm/bin/rvm-prompt v p g)))"
  ps="${ps}(\$(check_shorten \$(git-current-branch)))"
  ps="${ps}${regular}$orig_prompt"
  export PS1="$ps"
}

# actually change the prompt
prompt_git_ruby

# shorten github urls
function shorten() {
  curl -s -S -i http://git.io -F "url=$1" | grep Location | cut -d " " -f 2
}

# update all given git branches with latest from upstream
# default to master branch if no args given
function up {
  git fetch upstream
  # default to updating the master branch if no branches supplied
  if [ -n "$1" ];then
    branches="$@"
  else
    branches="master"
  fi

  for branch in $branches; do
    git checkout $branch
    stash=$(git stash save)
    git fetch
    git rebase upstream/master
    # if anything got stashed, reapply it?
    [ "$stash" != "No local changes to save" ] && git stash pop
  done
}; export -f up
